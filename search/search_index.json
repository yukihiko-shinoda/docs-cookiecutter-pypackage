{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cookiecutter PyPackage \u00b6 Cookiecutter template for a Python package, forked from briggySmalls/cookiecutter-pypackage . Documentation: https://yukihiko-shinoda.github.io/docs-cookiecutter-pypackage/ Features \u00b6 This template focus following: Target Python version: 3.5 - 3.8 Dependency tracking using Pipenv Linting provided by both pylint , flake8 , mypy [executed by GitHub Actions] Formatting provided by isort , pipenv-setup , black [checked by GitHub Actions] Analizing complexity and maintainability provided by radon , xenon [checked by GitHub Actions] All development tasks (lint, format, analize, test, etc) excluding deployment wrapped up in a python CLI by invoke Omit documentation workflows since this project targets early stages of development. In the early stages of development it is better to focus on providing working software and writing README.md than providing comprehensive documentation. @see Manifesto for Agile Software Development Quickstart \u00b6 1. Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher): pip install -U cookiecutter 2. Generate a Python package project: cookiecutter https://github.com/yukihiko-shinoda/cookiecutter-pypackage.git --checkout master-yukihiko-shinoda Then, you will interactively prompt some choices of templated values, for detail of templated values, see the Prompts . Then initialized project direcotry is created in current directory. Points to review after creating initialized project directory \u00b6 1. Review support range if the one of your package is not Python 3.5 - 3.8 .github/workflows/test.yml setup.py python_requires classifiers docs/CONTRIBUTING.md -> Get Started! -> 5. oldest Python version 2. Pin wheel version in Pipfle and execute pipenv lock if you prefer stability of deployment task. Remaining task after creating initialized project directory \u00b6 1. Commit and push to GitHub repository. 2. Activate your created repository on Code Climate . If you prefer, Enable [Pull request comments] and [Pull request status updates] from [Repo Settings] -> [GitHub] Copy and paste badge from [Repo Settings] -> [Badges] to this README file. 2-1. Copy \"TEST REPORTER ID\" from [Test Coverages] 2-2. register copied TEST REPORTER ID into secret in your pushed GitHub repository as name \"CC_TEST_REPORTER_ID\". 3. Activate your created repository on pyup.io . Create a new account at pyup.io or log into your existing account. Click on the green Add Repo button in the top left corner and select repository you created in Step 1. A popup will ask you whether you want to pin your dependencies. Click on Pin to add the repo. Once your repo is set up correctly, the pyup.io badge will show your current update status. 4. Issue API token at PyPI and register into secret of your GitHub repository as name pypi_password 5. Create tag v[0-9]+.[0-9]+.[0-9]+ and push to GitHub repository to deploy into PyPI . Then, get your code on! \ud83d\ude0e Add your package dependencies to your pipenv with pipenv install .","title":"Home"},{"location":"#cookiecutter-pypackage","text":"Cookiecutter template for a Python package, forked from briggySmalls/cookiecutter-pypackage . Documentation: https://yukihiko-shinoda.github.io/docs-cookiecutter-pypackage/","title":"Cookiecutter PyPackage"},{"location":"#features","text":"This template focus following: Target Python version: 3.5 - 3.8 Dependency tracking using Pipenv Linting provided by both pylint , flake8 , mypy [executed by GitHub Actions] Formatting provided by isort , pipenv-setup , black [checked by GitHub Actions] Analizing complexity and maintainability provided by radon , xenon [checked by GitHub Actions] All development tasks (lint, format, analize, test, etc) excluding deployment wrapped up in a python CLI by invoke Omit documentation workflows since this project targets early stages of development. In the early stages of development it is better to focus on providing working software and writing README.md than providing comprehensive documentation. @see Manifesto for Agile Software Development","title":"Features"},{"location":"#quickstart","text":"1. Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher): pip install -U cookiecutter 2. Generate a Python package project: cookiecutter https://github.com/yukihiko-shinoda/cookiecutter-pypackage.git --checkout master-yukihiko-shinoda Then, you will interactively prompt some choices of templated values, for detail of templated values, see the Prompts . Then initialized project direcotry is created in current directory.","title":"Quickstart"},{"location":"#points-to-review-after-creating-initialized-project-directory","text":"1. Review support range if the one of your package is not Python 3.5 - 3.8 .github/workflows/test.yml setup.py python_requires classifiers docs/CONTRIBUTING.md -> Get Started! -> 5. oldest Python version 2. Pin wheel version in Pipfle and execute pipenv lock if you prefer stability of deployment task.","title":"Points to review after creating initialized project directory"},{"location":"#remaining-task-after-creating-initialized-project-directory","text":"1. Commit and push to GitHub repository. 2. Activate your created repository on Code Climate . If you prefer, Enable [Pull request comments] and [Pull request status updates] from [Repo Settings] -> [GitHub] Copy and paste badge from [Repo Settings] -> [Badges] to this README file. 2-1. Copy \"TEST REPORTER ID\" from [Test Coverages] 2-2. register copied TEST REPORTER ID into secret in your pushed GitHub repository as name \"CC_TEST_REPORTER_ID\". 3. Activate your created repository on pyup.io . Create a new account at pyup.io or log into your existing account. Click on the green Add Repo button in the top left corner and select repository you created in Step 1. A popup will ask you whether you want to pin your dependencies. Click on Pin to add the repo. Once your repo is set up correctly, the pyup.io badge will show your current update status. 4. Issue API token at PyPI and register into secret of your GitHub repository as name pypi_password 5. Create tag v[0-9]+.[0-9]+.[0-9]+ and push to GitHub repository to deploy into PyPI . Then, get your code on! \ud83d\ude0e Add your package dependencies to your pipenv with pipenv install .","title":"Remaining task after creating initialized project directory"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/audreyr/cookiecutter-pypackage/issues If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Cookiecutter PyPackage could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/audreyr/cookiecutter-pypackage/issues . If you are proposing a new feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up cookiecutter-pypackage for local development. Please note this documentation assumes you already have virtualenv and Git installed and ready to go. 1. Fork the cookiecutter-pypackage repo on GitHub. 2. Clone your fork locally: cd path_for_the_repo git clone git@github.com:YOUR_NAME/cookiecutter-pypackage.git 3. Assuming you have virtualenv installed (If you have Python3.5 this should already be there), you can create a new environment for your local development by typing: virtualenv cookiecutter-pypackage-env source cookiecutter-pypackage-env/bin/activate This should change the shell to look something like: (cookiecutter-pypackage-env) $ 4. Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. 5. When you're done making changes, check that your changes pass flake8. Since, this package contains mostly templates the flake should be run for tests directory: flake8 ./tests 6. The next step would be to run the test cases. cookiecutter-pypackage uses pytest, you can run PyTest. Before you run pytest you should ensure all dependancies are installed: pip install -rrequirements_dev.txt pytest ./tests If you get any errors while installing cryptography package (something like #include <openssl/aes.h> ). Please update your pip version and try again: pip install -U pip 7. Before raising a pull request you should also run tox. This will run the tests across different versions of Python: tox If you are missing flake8, pytest and/or tox, just pip install them into your virtualenv. 8. If your contribution is a bug fix or new feature, you may want to add a test to the existing test suite. See section Add a New Test below for details. 9. Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature 10. Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.5, 3.6 and 3.7, 3.8 and for PyPy. Check https://travis-ci.org/audreyr/cookiecutter-pypackage/pull_requests and make sure that the tests pass for all supported Python versions. Add a New Test \u00b6 When fixing a bug or adding features, it's good practice to add a test to demonstrate your fix or new feature behaves as expected. These tests should focus on one tiny bit of functionality and prove changes are correct. To write and run your new test, follow these steps: 1. Add the new test to tests/test_bake_project.py . Focus your test on the specific bug or a small part of the new feature. 2. If you have already made changes to the code, stash your changes and confirm all your changes were stashed: git stash git stash list 3. Run your test and confirm that your test fails. If your test does not fail, rewrite the test until it fails on the original code: pytest ./tests 4. (Optional) Run the tests with tox to ensure that the code changes work with different Python versions: tox 5. Proceed work on your bug fix or new feature or restore your changes. To restore your stashed changes and confirm their restoration: git stash pop git stash list 6. Rerun your test and confirm that your test passes. If it passes, congratulations!","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"CONTRIBUTING/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"CONTRIBUTING/#report-bugs","text":"Report bugs at https://github.com/audreyr/cookiecutter-pypackage/issues If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"CONTRIBUTING/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.","title":"Fix Bugs"},{"location":"CONTRIBUTING/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"CONTRIBUTING/#write-documentation","text":"Cookiecutter PyPackage could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"CONTRIBUTING/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/audreyr/cookiecutter-pypackage/issues . If you are proposing a new feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"CONTRIBUTING/#get-started","text":"Ready to contribute? Here's how to set up cookiecutter-pypackage for local development. Please note this documentation assumes you already have virtualenv and Git installed and ready to go. 1. Fork the cookiecutter-pypackage repo on GitHub. 2. Clone your fork locally: cd path_for_the_repo git clone git@github.com:YOUR_NAME/cookiecutter-pypackage.git 3. Assuming you have virtualenv installed (If you have Python3.5 this should already be there), you can create a new environment for your local development by typing: virtualenv cookiecutter-pypackage-env source cookiecutter-pypackage-env/bin/activate This should change the shell to look something like: (cookiecutter-pypackage-env) $ 4. Create a branch for local development: git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. 5. When you're done making changes, check that your changes pass flake8. Since, this package contains mostly templates the flake should be run for tests directory: flake8 ./tests 6. The next step would be to run the test cases. cookiecutter-pypackage uses pytest, you can run PyTest. Before you run pytest you should ensure all dependancies are installed: pip install -rrequirements_dev.txt pytest ./tests If you get any errors while installing cryptography package (something like #include <openssl/aes.h> ). Please update your pip version and try again: pip install -U pip 7. Before raising a pull request you should also run tox. This will run the tests across different versions of Python: tox If you are missing flake8, pytest and/or tox, just pip install them into your virtualenv. 8. If your contribution is a bug fix or new feature, you may want to add a test to the existing test suite. See section Add a New Test below for details. 9. Commit your changes and push your branch to GitHub: git add . git commit -m \"Your detailed description of your changes.\" git push origin name-of-your-bugfix-or-feature 10. Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"CONTRIBUTING/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.5, 3.6 and 3.7, 3.8 and for PyPy. Check https://travis-ci.org/audreyr/cookiecutter-pypackage/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"CONTRIBUTING/#add-a-new-test","text":"When fixing a bug or adding features, it's good practice to add a test to demonstrate your fix or new feature behaves as expected. These tests should focus on one tiny bit of functionality and prove changes are correct. To write and run your new test, follow these steps: 1. Add the new test to tests/test_bake_project.py . Focus your test on the specific bug or a small part of the new feature. 2. If you have already made changes to the code, stash your changes and confirm all your changes were stashed: git stash git stash list 3. Run your test and confirm that your test fails. If your test does not fail, rewrite the test until it fails on the original code: pytest ./tests 4. (Optional) Run the tests with tox to ensure that the code changes work with different Python versions: tox 5. Proceed work on your bug fix or new feature or restore your changes. To restore your stashed changes and confirm their restoration: git stash pop git stash list 6. Rerun your test and confirm that your test passes. If it passes, congratulations!","title":"Add a New Test"},{"location":"console_script_setup/","text":"Console Script Setup \u00b6 Optionally, your package can include a console script using Click or argparse (Python 3.2+). How It Works \u00b6 If the 'command_line_interface' option is set to ['click'] or ['argparse'] during setup, cookiecutter will add a file 'cli.py' in the project_slug subdirectory. An entry point is added to setup.py that points to the main function in cli.py. Usage \u00b6 To use the console script in development: pip install -e projectdir 'projectdir' should be the top level project directory with the setup.py file The script will be generated with output for no arguments and --help. --help show help menu and exit Known Issues \u00b6 Using Click, installing the project in a development environment using: python setup.py develop will not set up the entry point correctly. This is a known issue with Click. The following will work as expected: python setup.py install pip install mypackage With 'mypackage' adjusted to the specific project. More Details \u00b6 You can read more about Click at: http://click.pocoo.org/","title":"Console Script Setup"},{"location":"console_script_setup/#console-script-setup","text":"Optionally, your package can include a console script using Click or argparse (Python 3.2+).","title":"Console Script Setup"},{"location":"console_script_setup/#how-it-works","text":"If the 'command_line_interface' option is set to ['click'] or ['argparse'] during setup, cookiecutter will add a file 'cli.py' in the project_slug subdirectory. An entry point is added to setup.py that points to the main function in cli.py.","title":"How It Works"},{"location":"console_script_setup/#usage","text":"To use the console script in development: pip install -e projectdir 'projectdir' should be the top level project directory with the setup.py file The script will be generated with output for no arguments and --help. --help show help menu and exit","title":"Usage"},{"location":"console_script_setup/#known-issues","text":"Using Click, installing the project in a development environment using: python setup.py develop will not set up the entry point correctly. This is a known issue with Click. The following will work as expected: python setup.py install pip install mypackage With 'mypackage' adjusted to the specific project.","title":"Known Issues"},{"location":"console_script_setup/#more-details","text":"You can read more about Click at: http://click.pocoo.org/","title":"More Details"},{"location":"invoke/","text":"Invoke \u00b6 The generated project is ready to run some useful tasks like formatting, linting, analyzing, testing. To do this we use pyinvoke to wrap up the required commands. Execute invoke --list to see the list of available commands.","title":"Invoke"},{"location":"invoke/#invoke","text":"The generated project is ready to run some useful tasks like formatting, linting, analyzing, testing. To do this we use pyinvoke to wrap up the required commands. Execute invoke --list to see the list of available commands.","title":"Invoke"},{"location":"prompts/","text":"Prompts \u00b6 When you create a package, you are prompted to enter these values. Templated Values \u00b6 The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. github_repository_name The name of GitHub repository to push generated project. GitHub repository often seems to be named with \"-\". project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of projectname. It seems to be better to aboid to use \"-\" nor \"_\". PEP 8 -- Style Guide for Python Code | Python.org PEP 423 -- Naming conventions and recipes related to packaging | Python.org PEP 423 -- Naming conventions and recipes related to packaging | Python.org naming - Is it ok to use dashes in Python files when trying to import them? - Stack Overflow project_short_description A 1-sentence description of what your Python package does. pypi_username Your Python Package Index account username. The PyPI or Python Package Index is the official third-party software repository for the Python programming language. Python developers intend it to be a comprehensive catalog of all open source Python packages. version The starting version number of the package. Options \u00b6 The following package configuration options set up different features for your project. use_pytest Wheter use pytest for testing or not. When not \"y\", progect will be generated to use unittest for testing. use_pypi_deployment_with_github_actions Whether use PyPI deployment with GitHub Actions. use_pyup Whether use pyup.io to keep Python dependencies secure, up-to-date, and compliant. pyup.io is a service that helps you to keep your requirements files up to date. It sends you automated pull requests whenever there's a new release for one of your dependencies. command_line_interface Whether to create a console script and witch package use for. Console script entry point will match the project_slug. open_source_license Note that \"GPL-3.0-or-later-short\" and \"Apache-2.0-short\" is not recognized by GitHub. If you are stranger around license, linked workflow will be your helps. Choose an open source license | Choose a License python_code_max_length_per_line Max length per line of Python code. This value will be set configure files for each linter and formater. pylint_docstring_min_length Minimum line length for functions/classes that require docstrings, shorter ones are exempt. In the early stages of development it is better to focus on providing working software and writing README.md than providing comprehensive documentation.","title":"Prompts"},{"location":"prompts/#prompts","text":"When you create a package, you are prompted to enter these values.","title":"Prompts"},{"location":"prompts/#templated-values","text":"The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. github_repository_name The name of GitHub repository to push generated project. GitHub repository often seems to be named with \"-\". project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of projectname. It seems to be better to aboid to use \"-\" nor \"_\". PEP 8 -- Style Guide for Python Code | Python.org PEP 423 -- Naming conventions and recipes related to packaging | Python.org PEP 423 -- Naming conventions and recipes related to packaging | Python.org naming - Is it ok to use dashes in Python files when trying to import them? - Stack Overflow project_short_description A 1-sentence description of what your Python package does. pypi_username Your Python Package Index account username. The PyPI or Python Package Index is the official third-party software repository for the Python programming language. Python developers intend it to be a comprehensive catalog of all open source Python packages. version The starting version number of the package.","title":"Templated Values"},{"location":"prompts/#options","text":"The following package configuration options set up different features for your project. use_pytest Wheter use pytest for testing or not. When not \"y\", progect will be generated to use unittest for testing. use_pypi_deployment_with_github_actions Whether use PyPI deployment with GitHub Actions. use_pyup Whether use pyup.io to keep Python dependencies secure, up-to-date, and compliant. pyup.io is a service that helps you to keep your requirements files up to date. It sends you automated pull requests whenever there's a new release for one of your dependencies. command_line_interface Whether to create a console script and witch package use for. Console script entry point will match the project_slug. open_source_license Note that \"GPL-3.0-or-later-short\" and \"Apache-2.0-short\" is not recognized by GitHub. If you are stranger around license, linked workflow will be your helps. Choose an open source license | Choose a License python_code_max_length_per_line Max length per line of Python code. This value will be set configure files for each linter and formater. pylint_docstring_min_length Minimum line length for functions/classes that require docstrings, shorter ones are exempt. In the early stages of development it is better to focus on providing working software and writing README.md than providing comprehensive documentation.","title":"Options"},{"location":"pypi_release_checklist/","text":"PyPI Release Checklist \u00b6 Before Your First Release \u00b6 1. Register the package on PyPI: python setup.py register 2. Visit PyPI to make sure it registered. For Every Release \u00b6 1. Commit the changes: git commit -m \"Changelog for upcoming release 0.1.1.\" 2. Update version number (can also be patch or major) bump2version minor 3. Push the commit: git push 4. Check test result at GitHub Actions 5. Push the tags, creating the new release on both GitHub and PyPI: git push --tags 6. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If not, try one of these: 6-1. Check your long_description locally: pip install readme_renderer python setup.py check -r -s About This Checklist \u00b6 This checklist is arranged from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It assumes that you are using all features of Cookiecutter PyPackage.","title":"PyPI Release Checklist"},{"location":"pypi_release_checklist/#pypi-release-checklist","text":"","title":"PyPI Release Checklist"},{"location":"pypi_release_checklist/#before-your-first-release","text":"1. Register the package on PyPI: python setup.py register 2. Visit PyPI to make sure it registered.","title":"Before Your First Release"},{"location":"pypi_release_checklist/#for-every-release","text":"1. Commit the changes: git commit -m \"Changelog for upcoming release 0.1.1.\" 2. Update version number (can also be patch or major) bump2version minor 3. Push the commit: git push 4. Check test result at GitHub Actions 5. Push the tags, creating the new release on both GitHub and PyPI: git push --tags 6. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If not, try one of these: 6-1. Check your long_description locally: pip install readme_renderer python setup.py check -r -s","title":"For Every Release"},{"location":"pypi_release_checklist/#about-this-checklist","text":"This checklist is arranged from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It assumes that you are using all features of Cookiecutter PyPackage.","title":"About This Checklist"}]}